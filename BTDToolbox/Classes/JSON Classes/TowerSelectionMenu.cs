// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BTDToolbox.Classes.JSON_Classes;
//
//    var towerSelectionMenu = TowerSelectionMenu.FromJson(jsonString);

namespace BTDToolbox.Classes.JSON_Classes
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TowerSelectionMenu
    {
        [JsonProperty("Items")]
        public List<TowerSelectItem> Items { get; set; }
        //public Item[] Items { get; set; }
    }

    public partial class TowerSelectItem
    {
        [JsonProperty("Icon")]
        public string Icon { get; set; }

        [JsonProperty("FactoryName")]
        public string FactoryName { get; set; }

        [JsonProperty("ObjectType")]
        public int ObjectType { get; set; }

        [JsonProperty("KeyboardShortcut")]
        public string KeyboardShortcut { get; set; }

        public override string ToString()
        {
            return this.FactoryName;
        }
    }
    
    public partial class TowerSelectionMenu
    {
        public static TowerSelectionMenu FromJson(string json)
        {
            TowerSelectionMenu obj = null;
            try { obj = JsonConvert.DeserializeObject<TowerSelectionMenu>(json, BTDToolbox.Classes.JSON_Classes.Converter.Settings); }
            catch (Newtonsoft.Json.JsonSerializationException) { }
            return obj;
        }
    }

    public static class Serialize
    {
        public static string ToJson(this TowerSelectionMenu self) => JsonConvert.SerializeObject(self, BTDToolbox.Classes.JSON_Classes.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

}
